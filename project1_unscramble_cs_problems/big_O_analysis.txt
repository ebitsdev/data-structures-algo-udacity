Task0 Time Complexity Analysis (Big O Worse Case)

import csv O(1)
with open('texts.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    texts = list(reader) O(1)
    print("First record of texts, {0} texts {1} at time {2}".format(*texts[0])) O(1)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    calls = list(reader) O(1)
    print("Last record of calls, {0} calls {1} at time {2}, lasting {3} seconds".format(*calls[-1])) O(1)

# In this task the time complexity is:
Time = 7xO(1)
The time complexity is: O(1)

Task1 Time Complexity Analysis

import csv O(1)
count1 = set() O(1)
with open('texts.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    texts = list(reader) O(1)
    for record in texts:
        count1.add(record[0]) nxO(1)
        count1.add(record[1]) nxO(1)
with open('calls.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    calls = list(reader) O(1)    
    for record in calls:
        count1.add(record[0]) nxO(1)
        count1.add(record[1]) nxO(1)
    print("There are {} different telephone numbers in the records.".format(len(count1))) O(1)

# In this task the time complexity is:
Time = 7xO(1) + 4x(nxO(1)
The time complexity is: O(n)

Task 2 Time Complexity Analysis

import csv O(1)
with open('texts.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    texts = list(reader) O(1)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    calls = list(reader) O(1)            
    phone_numbers = {} O(1)
    for i in range(len(calls)):
        if calls[i][1] in phone_numbers: O(1)
            phone_numbers[calls[i][1]] += int(calls[i][3]) nxO(1)
            if calls[i][0] in phone_numbers:
                phone_numbers[calls[i][0]] += int(calls[i][3]) nxO(1)
            else:
                phone_numbers[calls[i][0]] = int(calls[i][3]) nxO(1)
        else:
            phone_numbers[calls[i][1]] = int(calls[i][3]) nxO(1)
    longest_call = max(phone_numbers, key=phone_numbers.get) nxO(1)
print("{} spent the longest time, {} seconds, on the phone during September 2016.".format(longest_call, phone_numbers[longest_call])) O(1)

Time = 9xO(1) + 5x(nxO(1))

# The time complexity for task2 is:
O(n)

Time Complexity Analysis for Task3

import csv O(1)
with open('texts.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    texts = list(reader) O(1)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    calls = list(reader) O(1)
    all_fixed_calls = [] O(1)
    called_fixed_numbers = [] O(1)
    called_number_codes = set() O(1)
    for record in calls:
      if record[0].startswith("(080)"):
        all_fixed_calls.append(record[1]) nxO(1)
        if record[1].startswith("(080)"):
          called_fixed_numbers.append(record[1]) nxO(1)
        if record[1].startswith("7") or record[1].startswith("8") or record[1].startswith("9"):
          called_number_codes.add(record[1][:4]) nxO(1)
        elif record[1].startswith("140"):
          called_number_codes.add(record[1][:3]) nxO(1)
        else:
          called_number_codes.add(record[1].split(")")[0]+")") nxO(1)
    print("The numbers called by people in Bangalore have codes:") O(1)
    for number in sorted(called_number_codes): O(nlogn)
      print(number) nxO(1)
    percentage_of_calls = 100*(len(called_fixed_numbers)/len(all_fixed_calls)) O(1)
    print("{0:.2f} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.".format(percentage_of_calls)) O(1)

Time = 11x(01)+6(nxO(1))+O(nlogn)
# The time complexity for task3 is:
O(nlogn)

Time Complexity Analysis for Task4

import csv O(1)
telemarketers = set() O(1)
non_telemarketers = set() O(1)
with open('texts.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    texts = list(reader) O(1)
    for text_record in texts:
        non_telemarketers.add(text_record[0]) nxO(1)      
        non_telemarketers.add(text_record[1]) nxO(1)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f) O(1)
    calls = list(reader) O(1)
    for record in calls:           
        telemarketers.add(record[0]) nxO(1)
        non_telemarketers.add(record[1]) nxO(1)
    print("These numbers could be telemarketers: ") O(1)
    for number in sorted(telemarketers - non_telemarketers): O(nlogn)
        print(number) O(n)
Time = 7xO(1) + 4xO(n) + O(nlogn)
# The time complexity for task 4 is:
O(nlogn)